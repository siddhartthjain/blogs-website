{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Blog API",
    "description": "This is simple Blog application made with TypeScript, nodejs, sequelize. The app consists of two fundamental model Blogs and User . A user without loggging can only get The blogs else for other activities for eg Creating , updating , deleting , like and dislike user has to login to the application. All the routes are defined below. Ps : Once you login Please use the Authorization token When using a authorised route with Bearer as Prefix"
  },
  "securityDefinitions": {
    "JWTAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "Blog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "likes": {
          "type": "integer",
          "format": "int32"
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "provider": {
          "type": "string"
        },
        "Password": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "Likes": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "blogId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Tags": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "tag": {
          "type": "string"
        }
      }
    },
    "Comments": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "Comment": {
          "type": "string"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "blogId": {
          "type": "integer"
        },
        "parentId": {
          "type": "integer"
        }
      }
    },
    "BlogTags": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "blogId": {
          "type": "integer"
        },
        "tagId": {
          "type": "integer"
        }
      }
    }
  },
  "paths": {
    "/Auth/SignUp": {
      "post": {
        "summary": "sigin up of user",
        "description": "Sign up of user (Email should be unique)",
        "parameters": [
          {
            "name": "userObject",
            "in": "body",
            "description": "User Information ",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string",
                  "format": "email"
                },
                "password": {
                  "type": "string",
                  "format": "password",
                  "description": "should be strong min 8 Characters and must include uppercase lowercase and special character",
                  "default": "PassW0rd!"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User Created successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/Auth/Login": {
      "post": {
        "summary": "Login of user",
        "parameters": [
          {
            "name": "userObject",
            "in": "body",
            "description": "User Information",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email",
                  "default": "user@example.com"
                },
                "password": {
                  "type": "string",
                  "format": "password",
                  "default": "PassW0rd!"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User logged in successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/Blogs/allblogs": {
      "get": {
        "summary": "Get all blogs without authentification",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "type": "integer",
            "required": false,
            "default": 0,
            "description": "setting offset to prevous blogs"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "required": false,
            "default": 10,
            "maximum": 100,
            "description": "limit to get particular no of blogs"
          },
          {
            "name": "userId",
            "in": "query",
            "type": "integer",
            "required": false,
            "description": "user id of valid user whoms blog to filter out"
          },
          {
            "name": "blogId",
            "in": "query",
            "type": "integer",
            "required": false,
            "description": "specific blog id you want to see"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/Blogs": {
      "get": {
        "summary": "Get all blogs after authentification",
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "type": "integer",
            "required": false,
            "default": 0,
            "description": "setting offset to prevous blogs"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "required": false,
            "default": 10,
            "maximum": 100,
            "description": "limit to get particular no of blogs"
          },
          {
            "name": "userId",
            "in": "query",
            "type": "integer",
            "required": false,
            "description": "user id of valid user whoms blog to filter out"
          },
          {
            "name": "blogId",
            "in": "query",
            "type": "integer",
            "required": false,
            "description": "specific blog id you want to see"
          }
        ],

        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "500": {
            "description": "Server error"
          },
          "401": {
            "description": "Unauthorised"
          }
        }
      },
      "post": {
        "summary": "Create a new blog",
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "parameters": [
          {
            "name": "blogData",
            "in": "body",
            "description": "Blog data to be created",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": ["dev", "backend"]
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Blog created successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          },
          "401": {
            "description": "Unauthorised"
          }
        }
      }
    },
    "/Blogs/{id}/comment/{commentId}": {
      "patch": {
        "summary": "patch a comment",
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the  blog",
            "required": true,
            "type": "integer"
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "commentId",
            "required": true,
            "type": "integer"
          },
          {
            "name": "commentData",
            "in": "body",
            "description": "commentData to be patched",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "comment": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment patched successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          },
          "401": {
            "description": "Unauthorised"
          }
        }
      },
      "delete": {
        "summary": "Delete a Comment",
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the  blog",
            "required": true,
            "type": "integer"
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "Id of Comment",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment deleted successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          },
          "401": {
            "description": "Unauthorised"
          }
        }
      }
    },
    "/Blogs/{id}/comment/{commentId}/reply": {
      "post": {
        "summary": "post a reply",
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the  blog",
            "required": true,
            "type": "integer"
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "commentId",
            "required": true,
            "type": "integer"
          },
          {
            "name": "replyData",
            "in": "body",
            "description": "reply comment ",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                
                  "reply": {
                    "type": "string"
                  }
                
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment patched successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          },
          "401": {
            "description": "Unauthorised"
          }
        }
      }
    },
    "/Blogs/{id}/comment/{commentId}/reply/{replyId}": {
      "delete": {
        "summary": "Delete a Reply",
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the  blog",
            "required": true,
            "type": "integer"
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "Id of Comment",
            "required": true,
            "type": "integer"
          },
          {
            "name": "replyId",
            "in": "path",
            "description": "Id of Reply",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "reply deleted successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          },
          "401": {
            "description": "Unauthorised"
          }
        }
      }
    },
    "/Blogs/{id}/comment": {
      "post": {
        "summary": "post a comment",
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the  blog",
            "required": true,
            "type": "integer"
          },
          {
            "name": "commentData",
            "in": "body",
            "description": "commentData to be posted",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                  "comment": {
                    "type": "string"
                  }
                
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment posted successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          },
          "401": {
            "description": "Unauthorised"
          }
        }
      }
    },
    "/Blogs/{id}": {
      "patch": {
        "summary": "Update a  blog",
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the  blog to be updated created by Logged in User only",
            "required": true,
            "type": "integer"
          },
          {
            "name": "blogData",
            "in": "body",
            "description": "Blog data to be updated",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blog updated successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          },
          "401": {
            "description": "Unauthorised"
          }
        }
      },
      "delete": {
        "summary": "Delete a blog",
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the  blog to be Deleted created by Logged in User only",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Blog deleted successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          },
          "401": {
            "description": "Unauthorised"
          }
        }
      }
    },
    "/Blogs/like/{blogId}": {
      "post": {
        "summary": "Like a blog",
        "security": [
          {
            "JWTAuth": []
          }
        ],
        "parameters": [
          {
            "name": "blogId",
            "type": "integer",
            "in": "path",
            "required": true,
            "description": "Blog id of Blog which you are going to like"
          },
          {
            "name": "Liked",
            "in": "body",
            "required": true,
            "description": "whether you liked the post or disliked the post",
            "schema": {
              "type": "object",
              "properties": {
                "liked": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blog liked / disliked succesfully"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          },
          "401": {
            "description": "Unauthorised"
          }
        }
      }
    }
  }
}
